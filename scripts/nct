#!/bin/bash

#
# Copyright (C) 2016 nCrux
# Released under the terms of the GNU GPL v2.0.
# Author: Aditi <aditi@ncrux.com>
#


PROG_NAME=`basename $0`

OUTPUT_FILE=.nct.h
NCT_FILE=.nct
NCT_FRAG_FILE=
NCT_IN_FILE=
NOMENU_MODE=update

usage() {
	cat <<EOF
Usage:
	$PROG_NAME [nomenu] [-m|--mode {update|alldef|allno|allyes|random}] [-c|--config config_file] [-i|--input config_input_file]

	$PROG_NAME {menu|menu-n|menu-g|menu-q} [-c|--config config_file] [-i|--input config_input_file]

	$PROG_NAME gen [-c|--config config_file] [-o|--output output_file]

	$PROG_NAME merge [-c|--config config_file] [-f|--fragment fragment_config_file]

	$PROG_NAME help

	$PROG_NAME [-h|--help]

EOF
#	man -P cat nct
}

opts=`getopt -o o:c:i:f:m:h --long mode:,output:,config:,input:,fragment:,help -n $PROG_NAME -- "$@"`
if [ $? != 0 ] ; then exit 1; fi
eval set -- "$opts"

while true; do
	case "$1" in

	-m | --mode)
		NOMENU_MODE=$2;
		shift 2
		;;

	-o | --output)
		OUTPUT_FILE=$2
		shift 2
		;;

	-c | --config)
		NCT_FILE=$2
		shift 2
		;;

	-i | --input)
		NCT_IN_FILE=$2
		shift 2
		;;

	-f | --fragment)
		NCT_FRAG_FILE=$2
		shift 2
		;;

	-h | --help)
		usage
		exit 0
	   	;;

	--)
		shift
		break
		;;
	*)
		break;
		;;
	esac
done

# Expect only one mandatory argument
case "$#" in
	0)
		SUBCMD=nomenu
		;;
	1)
		SUBCMD=$1
		;;
	*)
		echo Please provide sub-command only. More than one mandatory arguments seen: $*
		exit 1
		;;
esac

if [ "$SUBCMD" == "nomenu" ]; then
	case "$NOMENU_MODE" in

	update)
		NOMENU_OPT="--olddefconfig"
		;;
	alldef)
		NOMENU_OPT="--alldefconfig"
		;;
	allno)
		NOMENU_OPT="--allnoconfig"
		;;
	allyes)
		NOMENU_OPT="--allyesconfig"
		;;
	random)
		NOMENU_OPT="--randconfig"
		;;
	*)
		echo Invalid mode provided for nomenu sub-command: $NOMENU_MODE
		exit 1
		;;
	esac
fi


export PATH=/usr/lib/ncrux/nct:$PATH
export NCT_CONFIG=$NCT_FILE
#export NCT_=NCT_

function lookup_nct_in()
{
	local MYDIR=
	while true; do
		if [ -f ${MYDIR}nct.in ]; then
			echo -n ${MYDIR}nct.in
			#readlink -e -n ${MYDIR}nct.in
			return
		fi
		MYDIR=${MYDIR}../

		if [ ! -d ${MYDIR} ]; then
			return
		fi
	done
}


case "$SUBCMD" in
help)
	usage
	exit 0
   	;;
nomenu|menu|menu-n|menu-g|menu-q)
	if [ "$NCT_IN_FILE" == "" ]; then
		NCT_IN_FILE=`lookup_nct_in`
		if [ "$NCT_IN_FILE" == "" ]; then
			echo No usable configuration input file nct.in found
		fi
		echo Using configuration input file: \"$NCT_IN_FILE\"
	fi

	if [ ! -f $NCT_IN_FILE ]; then
		echo Configuration input file $NCT_IN_FILE is not present
		exit 1
	fi

	;;
gen)
	if [ ! -f $NCT_FILE ]; then
		echo Configuration file $NCT_FILE is not present
		exit 1
	fi

	# Check output generator is available for requested file extension
	EXT=${OUTPUT_FILE##*.}
	;;
merge)
	if [ ! -f $NCT_FILE ]; then
		echo Configuration file $NCT_FILE is not present
		exit 1
	fi

	if [ "$NCT_FRAG_FILE" == "" ]; then
		echo Please provide configuration fragment file. Use "-f" option
		exit 1
	fi 

	if [ ! -f $NCT_FRAG_FILE ]; then
		echo Configuration fragment file $NCT_FRAG_FILE is not present
		exit 1
	fi
	;;
*)
	echo Invalid sub-command \'$SUBCMD\'.
	echo try \'$PROG_NAME --help\' for details.
	exit 1
esac


case "$SUBCMD" in
nomenu)
	ncrux-conf $NCT_IN_FILE $NOMENU_OPT
	;;
menu)
	ncrux-mconf -s $NCT_IN_FILE
	;;
menu-n)
	ncrux-nconf $NCT_IN_FILE
	;;
menu-g)
	#export NCRUX_GCONF_GLADE_FILE=/usr/share/ncrux/nct/ncrux-gconf.glade
	ncrux-gconf $NCT_IN_FILE
	;;
menu-q)
	ncrux-qconf $NCT_IN_FILE
	;;
gen)
	nct-gen-$EXT $NCT_FILE $OUTPUT_FILE
	;;
merge)
	nct-merge $NCT_FILE $NCT_FRAG_FILE
	;;
esac

